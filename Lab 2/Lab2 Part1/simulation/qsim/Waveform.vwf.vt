// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/27/2018 13:25:40"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Lab2_Part1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab2_Part1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg SW0;
reg SW1;
reg SW2;
reg SW3;
// wires                                               
wire OUT;

// assign statements (if any)                          
Lab2_Part1 i1 (
// port map - connection between master ports and signals/registers   
	.OUT(OUT),
	.SW0(SW0),
	.SW1(SW1),
	.SW2(SW2),
	.SW3(SW3)
);
initial 
begin 
#8000000 $finish;
end 

// SW0
always
begin
	SW0 = 1'b0;
	SW0 = #4000000 1'b1;
	#4000000;
end 

// SW1
always
begin
	SW1 = 1'b0;
	SW1 = #2000000 1'b1;
	#2000000;
end 

// SW2
always
begin
	SW2 = 1'b0;
	SW2 = #1000000 1'b1;
	#1000000;
end 

// SW3
always
begin
	SW3 = 1'b0;
	SW3 = #500000 1'b1;
	#500000;
end 
endmodule

